import os
import os.path
import platform
import shutil

# try:
#     Import('env')
# except:
#     exec open('build-env.py')
env = Environment()

def get_cuda_paths():
    """Determines CUDA {bin,lib,include} paths
    
    returns (bin_path,lib_path,inc_path)
    """
    
    # determine defaults
    if os.name == 'nt':
        bin_path = 'C:/CUDA/bin'
        lib_path = 'C:/CUDA/lib'
        inc_path = 'C:/CUDA/include'
    elif os.name == 'posix':
        bin_path = '/usr/local/cuda/bin'
        lib_path = '/usr/local/cuda/lib'
        inc_path = '/usr/local/cuda/include'
    else:
        raise ValueError, 'Error: unknown OS.  Where is nvcc installed?'
    
    if platform.platform()[:6] != 'Darwin' and \
            platform.machine()[-2:] == '64':
        lib_path += '64'
    
    # override with environement variables
    if 'CUDA_BIN_PATH' in os.environ:
        bin_path = os.path.abspath(os.environ['CUDA_BIN_PATH'])
    if 'CUDA_LIB_PATH' in os.environ:
        lib_path = os.path.abspath(os.environ['CUDA_LIB_PATH'])
    if 'CUDA_INC_PATH' in os.environ:
        inc_path = os.path.abspath(os.environ['CUDA_INC_PATH'])
    
    
    return (bin_path,lib_path,inc_path)


def build_header(env, do_pthreads = True, do_cuda = False):
    header_file = open('config.h', 'w')

    header_file.write('/* Auto generated file. Edits will not stick. */\n')

    if do_pthreads:
        header_file.write('#define USE_PTHREADS\n')

    if do_cuda:
        header_file.write('#define USE_CUDA\n')

    header_file.close()


def read_casadef(casapath, param):
    """Read and return param from casadef.py inside specified casapath"""
    import re
    print casapath
    if platform.system() == 'Linux':
        casadef = casapath + '/lib/python2.7/casadef.py'
    elif platform.system() == 'Darwin':
        casadef = casapath + '/Resources/python/casadef.py'
    else:
        raise ValueError('Unsupported platform: ' + platform,system())
    try:
        casadeffile = open(casadef)
        for line in casadeffile:
            match = re.match(param.strip() + ' *= *"(.*)"', line)
            if match:
                return match.groups()[0]
    except IOError:
        raise ValueError('Could not open ' + casadef)


def casa_svnpath_post46(casapath):
    import re
    import os.path
    svnpath = None

    svnpath = read_casadef(casapath, "subversion_url")

    if svnpath is None:
        raise IOError('Can not find casa svnpath.')

    return svnpath


def casa_svnversion(casapath):
    import re
    import os.path
    svnversion = None

    svnversion = read_casadef(casapath, "subversion_revision")

    if svnversion is None:
        raise IOError('Can not find casa version.')

    return svnversion


def whichpath(file):
    import os
    import os.path
    for path in os.environ['PATH'].split(':'):
        if os.path.exists(os.path.join(path, file)):
            l = os.path.join(path, file)
            while os.path.islink(l):
                l = os.path.join( os.path.dirname(l), os.readlink(l))
            return os.path.dirname(l)

    return None


def add_options():
    AddOption('--link2casa',
            dest='link_against_casa',
            action ='store_true',
            help = 'Tells scons to try to link against casa (not casacore).')

    AddOption('--casapath',
            dest='casapath',
            type='string',
            nargs = 1,
            action='store',
            metavar='DIR',
            help='Path of casa installation. Can be used when linking against casa.')

    AddOption('--wcspath',
            dest='wcspath',
            type='string',
            nargs = 1,
            action='store',
            metavar='DIR',
            help='Path of wcslib headers. This directory should contain wcslib/wcs.h')

    AddOption('--cxx',
            dest='cxx_version',
            type='string',
            nargs = 1,
            action='store',
            help='c++ complier to use')

    AddOption('--tag',
            dest='tag',
            type='string',
            nargs = 1,
            action='store',
            help='string to append to name of libstacker.')

    AddOption('--casasvnversion',
            dest='casasvnversion',
            type='int',
            nargs = 1,
            action='store',
            help='Set a specific version of casa to compile against.')

    AddOption('--cuda',
            dest = 'do_cuda',
            action = 'store_true',
            help = 'Compile cuda code.')

    AddOption('--no-pthreads',
            dest = 'do_pthreads',
            action = 'store_false',
            help = 'Compile without pthreads.',
            default = True)


def CheckPKGConfig(context, version):
    context.Message( 'Checking for pkg-config... ' )
    ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
    context.Result( ret )
    return ret


def CheckPKG(context, name):
    context.Message( 'Checking for %s... ' % name )
    ret = context.TryAction('PKG_CONFIG_PATH='+conf.env['ENV']['PKG_CONFIG_PATH']+' pkg-config --exists \'%s\'' % name)[0]
    # ret = context.TryAction('echo $PKG_CONFIG_PATH')

    context.Result( ret )
    return ret


env['ENV']['PKG_CONFIG_PATH'] = os.environ.get('PKG_CONFIG_PATH', '')
add_options()

do_cuda = GetOption('do_cuda')

if do_cuda:
    import inspect
#     thisFile = inspect.getabsfile(__path__[0])
#     thisDir = os.path.dirname(thisFile)
    thisDir = '.'
    print(thisDir)
    env.Tool('nvcc', toolpath = [os.path.join(thisDir)])
    cuda_exe_path, cuda_lib_path, cuda_inc_path = get_cuda_paths()
    env.Append(LIBPATH = [cuda_lib_path])
    env.Append(CPPPATH = [cuda_inc_path])
    env.Append(LIBS=['cuda', 'cudart'])
    env.Append(NVCCFLAGS = ['-arch=sm_20'])
    env.Append(SHNVCCFLAGS = ['-arch=sm_20'])
    
cxx_version = GetOption('cxx_version')
if cxx_version is not None:
    env.Replace(CXX = cxx_version)

wcspath = GetOption('wcspath')
if wcspath is not None:
    env.Append(CPPPATH = [wcspath])

do_pthreads = GetOption('do_pthreads')
build_header(env, do_pthreads=do_pthreads, do_cuda=do_cuda)


link_against_casa = GetOption('link_against_casa')
if link_against_casa is None:
    link_against_casa = False

if link_against_casa or platform.system() == 'Darwin':
    casapath = GetOption('casapath')
    if casapath is None:
        casapath = os.path.normpath(whichpath('casapy') + '/..')
        print('Found casa - {}'.format(casapath))

    if casapath is None:
        print('Can not locate casa. Please specify --casapath.')
        Exit(1)

    if platform.system() == 'Linux':
        casalibpath = os.path.join(casapath, 'lib')
        casapyinclude = os.path.join(casapath, 'include')
    elif platform.system() == 'Darwin':
        casalibpath = os.path.join(casapath, 'MacOS/lib')
        casapyinclude = os.path.join(casapath, 'Frameworks/Python.framework/Versions/2.7/include')

    svnversion = GetOption('casasvnversion')
    if svnversion is None:
        svnversion = casa_svnversion(casapath)
else:
    svnversion = 99999

casacorelibs = ['casa_scimath', 'casa_casa', 'casa_tables', 'casa_images', 
                'casa_ms', 'casa_components', 'casa_coordinates',
                'casa_lattices','casa_measures', 'casa_scimath_f', 
                'casa_fits', 'casa_msfits', 'casa_mirlib']


if link_against_casa:
    if int(svnversion) > 33600:
	    env['CPPDEFINES'] = {'LINKING_2_CASA_43': None}

    # Add code to support new casa version here
    if link_against_casa and int(svnversion) >= 38335:
        env.Append(CXXFLAGS = ['-std=c++11'])
    if link_against_casa and int(svnversion) >= 36590 or platform.system() == 'Darwin':
        import pysvn
        print('Downloading casacore headers matching casapy svn revision {0}'.format(svnversion))
        client = pysvn.Client()
        casacore_svnpath = casa_svnpath_post46(casapath)
        print(casacore_svnpath)
        dl_casacore_path = 'casacore-for-casapy-r{0}'.format(svnversion)
        if not os.access(dl_casacore_path, os.F_OK):
            os.mkdir(dl_casacore_path)
        svnrevision=pysvn.Revision(pysvn.opt_revision_kind.number, svnversion)
        rev = client.checkout(os.path.join(casacore_svnpath, 'casacore'),
                            os.path.join(dl_casacore_path, 'casacore'),
                            svnrevision, svnrevision)
        rev2 = client.checkout(os.path.join(casacore_svnpath, 'code'),
                            os.path.join(dl_casacore_path, 'casacode'),
                            svnrevision, svnrevision)

        # Temporary hack to solve issue with casacore version in casapy.
        shutil.copyfile(os.path.join(dl_casacore_path, 'casacore', 'casa', 'config.h.in'),
                os.path.join(dl_casacore_path, 'casacore', 'casa', 'config.h'))
        with open(os.path.join(dl_casacore_path, 'casacore', 'casa', 'config.h')) as tmpfile:
            lines = list(tmpfile.readlines())
        with open(os.path.join(dl_casacore_path, 'casacore', 'casa', 'config.h'), 'w') as tmpfile:
            for line in lines:
                if line == '#define CASA_DEFAULT_ALIGNMENT (@CASA_DEFAULT_ALIGNMENT@UL)\n':
                    line = '#define CASA_DEFAULT_ALIGNMENT (32UL)\n'
                tmpfile.write(line)
        print('done')
    elif link_against_casa and int(svnversion) >= 35147:
        pass
    elif link_against_casa and int(svnversion) > 33600:
        import pysvn
        print('Downloading casacore headers matching casapy svn revision {0}'.format(svnversion))
        client = pysvn.Client()
        casacore_svnpath = 'https://svn.cv.nrao.edu/svn/casa/trunk/casacore/'
        dl_casacore_path = 'casacore-for-casapy-r{0}'.format(svnversion)
        if not os.access(dl_casacore_path, os.F_OK):
            os.mkdir(dl_casacore_path)
        svnrevision=pysvn.Revision(pysvn.opt_revision_kind.number, svnversion)
        rev = client.checkout(casacore_svnpath,
                            os.path.join(dl_casacore_path, 'casacore'),
                            svnrevision, svnrevision)
        print('done')
    elif link_against_casa and int(svnversion) > 22889:
        import pysvn
        print('Downloading casacore headers matching casapy svn revision {0}'.format(svnversion))
        client = pysvn.Client()
        casacore_svnpath = 'https://svn.cv.nrao.edu/svn/casa/trunk/casacore/'
        dl_casacore_path = 'casacore-for-casapy-r{0}'.format(svnversion)
        svnrevision=pysvn.Revision(pysvn.opt_revision_kind.number, svnversion)
        rev = client.checkout(casacore_svnpath, dl_casacore_path, svnrevision, svnrevision)
        print('done')

    if int(svnversion) <= 32000:
        casacorelibs = ['casa_scimath', 'casa_casa', 'casa_tables', 'casa_images', 
                        'casa_ms', 'casa_components', 'casa_coordinates',
                        'casa_lattices','casa_measures', 'casa_scimath_f',
                        'casa_fits', 'casa_msfits', 'casa_derivedmscal',
                        'casa_mirlib']

    # Also add code here.
    if int(svnversion) >= 36590 or platform.system() == 'Darwin':
        env.Append(CPPPATH = [dl_casacore_path,
                              os.path.join(dl_casacore_path, 'casacore'),
                              os.path.join(dl_casacore_path, 'casacode'),
                              casapyinclude,
                             ])
    elif int(svnversion) >= 35147:
        env.Append(CPPPATH = [casapyinclude,
                              os.path.join(casapyinclude, 'casacore'),
                              os.path.join(casapyinclude, 'casacode')
                             ])
    elif int(svnversion) > 33600:
        env.Append(CPPPATH = [dl_casacore_path,
                              os.path.join(dl_casacore_path, 'casacore'),
                              casapyinclude,
                              os.path.join(casapyinclude, 'casacode')
                             ])
    elif int(svnversion) > 32000:
        env.Append(CPPPATH = [dl_casacore_path,
                              casapyinclude,
                              'casacode-for-casapy-r32491'
                             ])
    elif int(svnversion) >= 31966:
        env.Append(CPPPATH = [casapyinclude,
                              os.path.join(casapyinclude, 'casacore'),
                              os.path.join(casapyinclude, 'casacode'),
                             ])

    elif int(svnversion) > 22889:
        env.Append(CPPPATH = [dl_casacore_path,
                              os.path.join(dl_casacore_path, 'casacore'),
                              casapyinclude,
                             ])
    else:
        env.Append(CPPPATH = [casapyinclude, os.path.join(casapyinclude, 'casacore')])
    env.Append(LIBPATH = [casalibpath])

    casacoresoversion = None

    if platform.system() == 'Linux':
        lib_pre_suffix = '.so'
        lib_post_suffix = ''
    elif platform.system() == 'Darwin':
        lib_pre_suffix = ''
        lib_post_suffix = '.dylib'
    lib_suffix = lib_pre_suffix + lib_post_suffix

    casalibs = os.listdir(casalibpath)
    if not 'libcasa_casa' + lib_suffix in casalibs:
        import re
        for lib in casalibs:
            match= re.match('libcasa_casa' + lib_pre_suffix +'((?:\.[0-9]*)*)' + lib_post_suffix, lib)
            if match:
                casacoresoversion = match.group(1)

                casalibpath_local = 'libs'
                if not os.access(casalibpath_local, os.F_OK):
                    os.mkdir(casalibpath_local)

                for lib in casacorelibs:
                    oldpath = os.path.join(casalibpath, 
                            'lib'+lib+lib_pre_suffix+casacoresoversion+lib_post_suffix)
                    newpath = os.path.join(casalibpath_local, 'lib'+lib+lib_suffix)
                    if not os.access(newpath, os.F_OK):
                        os.symlink(oldpath,newpath)
                env.Append(LIBPATH = [casalibpath_local])
else:
    # linking against casacore, not casa. Dunno how to find include intelligently...
    env.Append(CPPPATH = [ '/usr/include/casacore', '/usr/include/casarest' ])
    env['CPPDEFINES'] = {'CASACORE_VERSION_2': True, 'casa': 'casacore'}

conf = Configure(env, custom_tests = {'CheckPKGConfig': CheckPKGConfig, 'CheckPKG': CheckPKG})

if not link_against_casa and conf.CheckPKGConfig('0.15.0') and conf.CheckPKG('casacore >= 2.0.0'):
    env.ParseConfig('pkg-config --cflags --libs casacore')
    env['CPPDEFINES'] = {'CASACORE_VERSION_2': None}
elif not link_against_casa and conf.CheckPKGConfig('0.15.0') and conf.CheckPKG('casacore >= 1.0'):
    env.ParseConfig('pkg-config --cflags --libs casacore')
elif conf.CheckLib('casa_casa'):
    env.Append(LIBS = casacorelibs)
elif conf.CheckLib('casacore'):
    env.Append(LIBS = ['casacore'])
else:
    print('Did not find casacore libraries!')
    Exit(1)

if platform.system() == 'Linux':
    if link_against_casa:
        if os.access(os.path.join(casalibpath, 'libgfortran.so.1'), os.F_OK):
            env.Append(LIBS=File(os.path.join(casalibpath, 'libgfortran.so.1')))
        env.Append(LIBS=File(os.path.join(casalibpath, 'liblapack.so.3')))
        env.Append(LIBS=File(os.path.join(casalibpath, 'libblas.so.3')))
        if int(svnversion) >= 38335:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libwcs.so.5')))
        else:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libwcs.so.4.7')))
        if os.access(os.path.join(casalibpath, 'libcfitsio.so.0'), os.F_OK):
            env.Append(LIBS=File(os.path.join(casalibpath, 'libcfitsio.so.0')))
    else:
        ## env.Append(LIBS=['gfortran', 'lapack', 'blas', 'wcs', 'cfitsio'])
        ## For Ubuntu 18:
        env.Append(LIBS=['wcs', 'cfitsio'])
elif platform.system() == 'Darwin':
    if link_against_casa:
        if int(svnversion) >= 33623:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libgfortran.3.dylib')))
        else:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libgfortran.2.dylib')))
        if int(svnversion) >= 38335:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libwcs.5.15.dylib')))
        else:
            env.Append(LIBS=File(os.path.join(casalibpath, 'libwcs.4.17.dylib')))
        env.Append(LIBS=File(os.path.join(casalibpath, 'libcfitsio.dylib')))
    else:
        env.Append(LIBS=['gfortran', 'lapack', 'blas', 'wcs', 'cfitsio'])


# env.Append(CCFLAGS = ['-fPIC','-O3'])
env.Append(CCFLAGS = ['-O3'])

Sources = []
Sources.append("Coords.cpp")
Sources.append("Model.cpp")
#Sources.append("DataIOFits.cpp")
Sources.append("CachedDataIO.cpp")
Sources.append("DataIO.cpp")
Sources.append("msio.cpp")
Sources.append("Chunk.cpp")
Sources.append("PrimaryBeam.cpp")
Sources.append("MSPrimaryBeam.cpp")
Sources.append("ModsubChunkComputer.cpp")
Sources.append("StackChunkComputer.cpp")
if do_cuda:
    Sources.append("CommonCuda.cu")
    Sources.append("StackChunkComputerGpu.cpp")
    Sources.append("StackChunkComputerGpu_cuda.cu")
    Sources.append("ModsubChunkComputerGpu.cpp")
    Sources.append("ModsubChunkComputerGpu_cuda.cu")
    Sources.append("StackMCCCGpu.cpp")
    Sources.append("StackMCCCGpu_cuda.cu")

Sources.append("MSComputer.cpp")
Sources.append('stacker.cpp')

tag = GetOption('tag')
if tag is None:
    tag = ''
else:
    tag = '-' + tag

object_list = env.SharedObject(Sources)
if link_against_casa:
    target_name = 'stacker-r{0}{tag}'.format(svnversion, tag=tag)
else:
    target_name = 'stacker{tag}'.format(tag=tag)
lib_target = env.SharedLibrary(target=target_name, source=object_list)


def fixOSXlibpaths(target, source, env):
    import subprocess
    print "Fixing library paths for OSX..."
    otool = os.popen("otool -L " +  str(target[0])).readlines()
    for o_lib in otool:
        o_lib = o_lib.split()[0]
        for lib in env["LIBS"]:
            lib = os.path.basename(str(lib)).split('.')[0]
            if lib[:3] != "lib":
                lib = "lib" + lib
            if re.match("(" + lib + "\..*dylib)", o_lib):
                os.system("install_name_tool -change " + o_lib + " " + "@executable_path/../../../../../../../" + o_lib + " " + str(target[0]))
                break


if platform.system() == 'Darwin':
    env.AddPostAction(lib_target, fixOSXlibpaths)
